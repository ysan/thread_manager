@startuml

skinparam ParticipantPadding 50
skinparam BoxPadding 200
skinparam roundcorner 10

participant main
box "managed modules per pthread" #LightBlue
participant ModuleA
participant ModuleB
participant ModuleC
end box
hide footbox

activate main

note over of main 
Create an instances of 
ModuleA, ModuleB, ModuleC
and register with setup().
end note

main -> main: CThreadMgr::setup()
activate main
main->>ModuleA: on_create
'activate ModuleA
'deactivate ModuleA
main->>ModuleB: on_create
'activate ModuleB
'deactivate ModuleB
main->>ModuleC: on_create
'activate ModuleC
'deactivate ModuleC
deactivate main

== ThreadManager-framework was ready. ==

main -> main: CThreadMgrExternalIf::\ncreate_external_cp()
activate main
deactivate main

main->main: request_sync\nmsg:"test-message"
activate main
main->>ModuleA: sequence1

activate ModuleA
note over of ModuleA 
simple-echo
end note

ModuleA->>main: reply\nmsg:"test-message"
deactivate ModuleA

deactivate main

main->main: receive_external
activate main
note over of main 
getting result -> success
msg:"test-message"
end note
'deactivate main
return

main->main: request_sync
activate main
main->>ModuleA: sequence2

activate ModuleA
ModuleA->>ModuleB: request_async\nsequence2
deactivate ModuleA

note over of ModuleA 
waiting for reply
while waiting ModuleA
can execute other sequences.
end note

activate ModuleB
ModuleB->>ModuleC: request_async\nsequence4
deactivate ModuleB

note over of ModuleB
wait for reply
while waiting ModuleB
can execute other sequences.
end note

activate ModuleC
ModuleC->>ModuleB: reply
deactivate ModuleC

activate ModuleB
ModuleB->>ModuleA: reply
deactivate ModuleB


activate ModuleA
ModuleA->>main: reply
deactivate ModuleA

deactivate main

main->main: receive_external
activate main
note over of main 
getting result -> success
end note
'deactivate main
return



@enduml
